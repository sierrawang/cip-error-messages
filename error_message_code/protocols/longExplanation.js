// Long error messages are taken from http://daveagp.github.io/errors/, https://github.com/cemc/cscircles-wp-content/blob/master/plugins/pybox/plugin-errorhint-en_US.php

import { getLastLineOfError, getStandardError, getTrimError, yellowText } from "../errorhint";

const errorsWithExplanation = [
    [/^NameError: (global )?name '(.*)' is not defined$/,'This error indicates that Python tried to look up a variable or function but it was not defined (or not in the current scope). If you want to access a variable or function, check spelling, capitalization, and that you defined the variable properly. Here is one example:\r\n\tprint(Max(3, 4))  # Max should be max\r\nIf you did not mean to access a variable, you might have meant a string, which needs to be surrounded by quotation marks.\r\n\tprint(Hello)  # should be print("Hello")'],
    [/^SyntaxError: invalid syntax$/, 'This error indicates Python was unable to interpret your code since a grammar rule was violated. Common issues include: strings must be enclosed within quotation marks, conditional expressions require a colon at the end, conditional expressions involving comparisons are == while assignments are =, and multiplication must always be done with *. For example,\r\n\tif x > 0 # needs colon at end of statement\r\nMany issues can cause this error; be sure to also read the lines before and after the indicated one.'],
    [/^EOFError: EOF when reading a line$/, "This error indicates that Python ran out of input while reading. Either you called \'input()\' more often than intended, or you supplied less test input than necessary. For example,\r\n\tprint(input()+input()) # reads 2 lines"],
    [/^TypeError: unsupported operand type\(s\) .*$/, "Python reached a step where it didn't know how to compute what was asked. This often can mean using a non-numerical value in the wrong place, for example:\r\nprint('5'+1) # adding or concatenation?\r\nIf this is the case, check that all values used in the arithmetic expressions have been converted into the intended type (http://cscircles.cemc.uwaterloo.ca/4-types/)"],
    [/^SyntaxError: unexpected EOF while parsing$/, "This error indicates that Python ran into the end of code unexpectedly. Check that each open parenthesis has a corresponding closed parenthesis before the end of the line. For example, \r\n\tprint(min(5,max(x,y)) # lacks a ')' at end\r\nOr you may have ended by forgetting a body:\r\n\tif x > y: # needs a body"],
    [/^IndentationError: unindent does not match any outer indentation level$/, "This error indicates that Python ran into an indentation level that does not match earlier ones. Make sure that you indent properly after conditional expressions, and that you unindent accordingly afterwards. For example,\r\nif x > y:\r\n  print('ok')\r\n print('?') # needs 0 or 2 indents\r\nCount indentation carefully if you have nested blocks."],
    [/^SyntaxError: EOL while scanning string literal$/, "This error indicates that Python reached the end of the line while reading a string. Check that you have terminated your string properly. For example,\r\n\tprint('hello) # should be print('hello')\r\nWhen using special characters such as a quote or backslash within a string, place a single backslash before the special character."],
    [/^IndentationError: unexpected indent$/, "This error indicates that Python ran into an indentation with no grammatical basis. Check that you have set your indentations correctly. Ensure that there are no stray spaces in front of any line of code. For example,\r\nprint('ok')\r\n    print('Bad spaces at start of line')"],
    [/^TabError: inconsistent use of tabs and spaces in indentation$/, "This error indicates that Python encountered mixed tabs and spaces. Do not intermix tabs and spaces in code indentation. Use either only tabs or only spaces (we recommend spaces). If using multiple text editors, ensure that the type and length of tab is consistent."],
    [/^IndentationError: expected an indented block$/, "This error indicates that Python expected indented code but not encounter it. Recall that after a \"if\", \"for\", \"while\" or \"def\" expression, an indentation is required for its enclosed statements. For example,\r\nif name == 'Jim':\r\nprint('Hello') # should be indented"],
    [/^ValueError: invalid literal for (\w+)\(\) with base \d+.*$/, 'This error indicates that Python tried to convert a string to a number, but the string could not be interpreted numerically. For example, \r\n\ty = int("5.4") # ok: float("5.4") or int("5")'],
    [/^TypeError: '(.+)' object is not iterable$/, "This error indicates that Python attempted to iterate over a series of objects when only a single object was given. The most common problem is that functions like max() and min() require multiple objects in order to perform their calculations; only one object will not suffice. print(max(a)) # should be print(max(a,b))"],
    [/^TypeError: '(.+)' object is not callable$/, "This error usually indicates a bad use of parentheses. For example,\r\n\t5(4) # 5 isn't a function, did you mean 5*4?\r\nIn complicated expressions, make sure that your parentheses properly match, containing function arguments and/or subexpressions.\r\n\tprint(min(1,2)(3,4)) # what is (3,4)?"],
    [/^TypeError: can't multiply sequence by non-int of type '(.+)'$/, "Did you mean to multiply a string or a list by an integer? Python allows this, for example 'hi'*2 is 'hihi'. But you cannot multiply by a non-integer, and you cannot multiply lists and/or strings by each other. \r\nFor example, \r\n\t[1, 2] * 1.5  and (1, 2) * 1.5 do not work \r\nIf you want to multiply the values inside of a list, you must use a loop to do each multiplication separately."],
    [/^IndexError: (string|list) index out of range$/, 'This error indicates that Python attempted to access the index of a string or list beyond its indices. When accessing the elements of a string or list, keep in mind that the index count goes from 0 to its length minus 1.\r\nFor example, \r\n\tc = mystr[i] # needs i >= 0, i < len(mystr)'],
    [/^SyntaxError: unexpected character after line continuation character$/, "A line continuation character means a backslash that was not used in string escaping properly. Check that you do not have too many or too few backslashes, especially when attempting to use special characters. If you meant to use line continuation (we don\'t recommend it), check that it is at the end of the line:\r\n\tx = 3 \\\\\r\n\t+ 4        # x is 7"],
    [/^TypeError: Can't convert '(.+)' object to str implicitly$/, "This error indicates that Python tried to + a string with a non-string. If you meant addition, make sure all string values are converted to numbers with int() or float. If you meant concatenation, make sure all values are converted to strings with str(). For example,\r\n\t'1234' + 5 # what is intended here?"],
    [/^AttributeError: '(.+)' object has no attribute '(.+)'$/, 'This error indicates that Python found no method or field when the code tried to call it on an object. Check that all object variable names and function calls are actually defined by that object, spelled and capitalized correctly. For example,\r\n\tobj = [1, 2]\r\n\tobj.replace(1, 0) #"replace" undefined on lists\r\nUse print(dir(obj)) to see the methods defined for an object.'],
    [/^TypeError: '(.+)' object is not subscriptable$/, "This error indicates that Python attempted to apply a subscript index access, using \'[\' and \']\', to an object that is not a list or string. This may occur due to a number of grammatical errors, for example,\r\n\tprint(input[0]) # try print(input()[0])"],
    [/^TypeError: string indices must be integers$/, "This error indicates that Python attempted to apply a subscript index access, using [ and ], on an index that is not an integer.\r\nFor example,\r\n\tmystring[5/2] # 5/2 is not an integer"],
    [/^SyntaxError: cannot assign to (function call|literal)$/, 'This error indicates that Python attempted to assign a value in an invalid way, such as,\r\n\tsqrt(4) = x # we can\'t redefine sqrt(4)\r\nThis probably means either that you flipped the sides (the variable name in a = assignment goes on the left); try x = sqrt(4) or you meant to do equality comparison == instead of assignment =; try sqrt(4) == x.'],
    [/^UnboundLocalError: local variable '(.+)' referenced before assignment$/, 'This error can only occur inside of a function that you defined. It means that a variable will be defined further down but has not been yet. \r\nFor example,\r\n\tdef f():\r\n\t\tprint(x)\r\n\t\tx = 5\r\n\tf()\r\nFor more information see "http://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" and "http://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python"'],
    [/^SyntaxError: cannot assign to operator$/, "This error indicates that Python encountered an illegal value assignment. If you want to assign a value to a variable, remember that on the left side of the assignment operator you may only have one term, and the right side can be any expression. Or you might have confused = with ==. For example,\r\nx + y = z # try z = x + y or x + y == z"],
    [/^ValueError: could not convert string to float:(.*)$/, "This error indicates that Python attempted to convert a string to a float that is not a floating point number. If you are attempting to convert a string to a float, make sure that the string actually represents a floating point number. Ensure that there are no extraneous characters in the string: \r\nFor example,\r\n\tx = float('314 159') # did you mean 314.159?"],
    [/^TypeError: unorderable types: (.*)$/, "This error indicates that Python attempted to compare and put in order two differing types of objects. You can compare numbers like 5 >= 4 and strings like 'food' > 'fish' but you can't mix the two or compare other types.\r\nz = max(5, '6')   # error when max calls >\r\nbooly = max > min # can't compare functions"],
    [/^TypeError: not all arguments converted during string formatting$/, "The % symbol has two purposes in Python: modulo (remainder) of numbers, and string formatting that we don't discuss. This error probably means you accidentally applied % to a string.\r\nFor example,\r\n\tif '10' % 5 == 0: # '10' must be an int"],
    [/^TypeError: (object of type '.*' has no .*\(.*\)|bad operand type for .*|.* argument must be a .*)$/, "This error indicates that Python attempted to call a function on the wrong kind of object. \r\nFor example,\r\n\tprint(len(input)) # try print(len(input()))\r\n\tprint(abs('-5'))  # convert to int first"],
    [/^TypeError: '.*' object cannot be interpreted as an integer$/, "This error indicates that Python encountered a non-integer value where an integer value was necessary. This often occurs in a \'range()\' statement. \r\nFor example,\r\n\tfor i in range(0, '10'): # use str()"],
    [/^TypeError: an integer is required \(got type .*\)$/, "This error indicates that Python encountered a non-integer value for a function call that requires an integer. This error occurs often with \'chr()\' that converts integers to ASCII characters:\r\n\tletter = chr('95') # convert to int() first"],
    [/^RuntimeError: maximum recursion depth exceeded.*$/, 'This error indicates that Python executed a function that utilized recursion more times than allowed by the interpreter. If you are using a recursive function, ensure that there is a way for the recursion to end, and that it is eventually reached by every input.\r\nFor example, \r\n\tdef f(x): \r\n\t\treturn x + f(x-1)\r\n\tprint(f(5)) # never stops!'],
    [/^IndexError: list assignment index out of range$/, 'This error indicates that Python attempted to access the index of a list beyond its indices. When accessing the elements of a string or list, keep in mind that the index count goes from 0 to its length minus 1. \r\nFor example, \r\n\taList = ["f", "o"]\r\n\taList[2] = "x" # can only assign [0] or [1]\r\nIf you want to append to the end of a list, use \'list.append()\'.'],
    [/^TypeError: slice indices must be integers or None or have an __index__ method$/, "A \'slice\' refers to a multi-part substring/sublist operator, like \'x[b:e]\' or \'x[b:e:s]\'. Make sure that you use integers for all values inside of \'[]\'. If you have something like \'s[1:s[len(s)-1]]\', try s[1:len(s)-1]"],
    [/^TypeError: ord\(\) expected .*?, but .*? found$/, "The ord function, which converts characters to ASCII values, can only accept single characters, which are strings of length 1.\r\nprint(ord(3)) # try ord('3') or chr(3)?"],
    [/^SyntaxError: '(.*?)' .*(outside|not.*in).*loop$/, 'This error indicates that Python encountered a statement outside of a loop that only makes sense inside of a loop (\'break\' stops the loop, \'continue\' skips to the next iteration of the same loop). Check the scope and placement of your statement and ensure it is inside of the loop.'],
    [/^SyntaxError: 'return' outside function$/, 'Double-check your indentation and line placement, so that return only occurs inside of functions:\r\ndef f(x):\r\n\tif x > 0: return True\r\nreturn False           # outside!'],
    [/^TypeError: can only concatenate list \(not .*\) to list$/, 'Adding elements to lists can be done in two ways in Python,\r\nL = [1, 2]\r\nprint(L + [3]) # L stays [1, 2]\r\nL.append(3)    # changes L\r\nThis error indicates that you used + but didn\'t add two lists.']
]

// Get an explanation for this error, if one exists in the stored map
function getLongExplanation(error) {
    for (var tup of errorsWithExplanation) {
        if (error.match(tup[0])) {
            return tup[1];
        }
    }
    return null;
}

// Outputs a readable explanation for the most common python error messages
export function getExplainError(code, stderr, term) {
    const trimmedErr = getTrimError(code, stderr);
    const error = getLastLineOfError(stderr);

    // Try getting an explanation without normalizing the error
    var explanation = getLongExplanation(error);
    if (explanation) {
        return trimmedErr + "\r\n" + yellowText(explanation);
    }

    // If we didn't find an explanation, return standard error
    return getStandardError(code, stderr);

}